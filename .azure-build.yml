strategy:
  matrix:
    Linux:
      imageName: 'ubuntu-16.04'
    Windows:
      imageName: 'vs2017-win2016'
    Mac:
      imageName: 'macOS-10.14'

pool:
  vmImage: $(imageName)

variables:
  buildConfiguration: Release
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
steps:
- task: DotNetCoreInstaller@1
  displayName: 'Use .NET Core sdk 2.2.x'
  inputs:
    version: 2.2.x

- bash: echo NugetVersion is $NugetVersion; export NugetVersion
  displayName: 'export NugetVersion into env vars'
  env:
    NugetVersion: $(NugetVersion)

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    command: build
    projects: 'NuKeeper.sln'
    arguments: '--configuration $(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: test
    projects: 'NuKeeper.sln'
    arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
    nobuild: true

- script: |
    dotnet tool install -g dotnet-reportgenerator-globaltool
    reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines;Cobertura
  displayName: Create Code coverage report
  condition: eq(variables['Agent.OS'], 'Windows_NT')

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'
  condition: eq(variables['Agent.OS'], 'Windows_NT')

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop for master'
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)'
  condition: and(and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')), eq(variables['Agent.OS'], 'Windows_NT'))
